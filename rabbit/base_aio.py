import asyncio
import json
import logging
import os
import socket
import uuid
from typing import Dict, Any, Callable, Optional, Union, List

import aio_pika
from aio_pika import IncomingMessage
from aio_pika.abc import (
    AbstractChannel,
    AbstractQueue,
    AbstractIncomingMessage,
    ExchangeType,
)

from rabbit.aio_config import RabbitMQConfig

logging.basicConfig(
    level=logging.INFO,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ INFO
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)


class AsyncRabbitBase:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å RabbitMQ, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π aio_pika.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π.
    """

    def __init__(self, config: RabbitMQConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞.

        :param config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RabbitMQ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
        """
        self.config = config
        self.pending_responses: Dict[str, asyncio.Future] = (
            {}
        )  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

    async def connect_with_retry(
        self,
        connection_url: str,
        max_retries: int = 10,
        delay: int = 5,
    ) -> aio_pika.abc.AbstractRobustConnection:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.

        :param connection_url: URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :return: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ
        """
        log.warning(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ –ø–æ URL: {connection_url}")
        for attempt in range(max_retries):
            try:
                connection = await aio_pika.connect_robust(connection_url)
                log.warning(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"
                )
                return connection
            except Exception as e:
                log.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}"
                )
                if attempt < max_retries - 1:
                    await asyncio.sleep(delay)
                else:
                    log.error(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
                    )
                    raise

    async def get_connection(self) -> aio_pika.abc.AbstractRobustConnection:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ.

        :return: –û–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è aio_pika.RobustConnection.
        """
        # return await aio_pika.connect_robust(self.config.connection_url)
        return await self.connect_with_retry(self.config.connection_url)

    async def declare_infrastructure(
        self,
        channel: AbstractChannel,
        additional_bindings: Optional[List[Dict[str, str]]] = None,
    ) -> AbstractQueue:
        """
        –û–±—ä—è–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É RabbitMQ: DLX, DLQ, –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ –∏ –æ—á–µ—Ä–µ–¥—å.
        :param channel: –ö–∞–Ω–∞–ª –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.
        :param additional_bindings: –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫.
        :return: –û–±—ä–µ–∫—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
        """
        # –û–±—ä—è–≤–ª—è–µ–º Dead Letter Exchange (DLX)
        dlx_exchange = await channel.declare_exchange(
            self.config.dlx_name,
            aio_pika.ExchangeType.FANOUT,
            durable=False,  # Durable (—ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–º–µ–Ω–Ω–∏–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
        )
        log.info(
            f"‚úÖ DLX (Dead Letter Exchange) –æ–±—ä—è–≤–ª–µ–Ω: {dlx_exchange.name}\nüî∫ –≠—Ç–æ –æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.üîª\n"
        )

        # –û–±—ä—è–≤–ª—è–µ–º Dead Letter Queue (DLQ)
        dlq = await channel.declare_queue(self.config.dlx_key, durable=False)
        await dlq.bind(dlx_exchange)
        log.info(
            f"üîó DLQ (Dead Letter Queue) –æ–±—ä—è–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞: {dlq.name}\nüî∫ –≠—Ç–æ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.üîª\n"
        )

        # –û–±—ä—è–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω–Ω–∏–∫
        main_exchange = await channel.declare_exchange(
            self.config.exchange_name, aio_pika.ExchangeType.FANOUT, durable=False
        )
        log.info(
            f"üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω: {main_exchange.name}\nüî∫ –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É.üîª\n"
        )

        # –û–±—ä—è–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ DLX
        main_queue = await channel.declare_queue(
            self.config.routing_key,
            durable=True,
            arguments={"x-dead-letter-exchange": self.config.dlx_name},
        )
        await main_queue.bind(main_exchange, routing_key=self.config.routing_key)
        log.info(
            f"üì¨ –û—Å–Ω–æ–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –æ–±—ä—è–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞: {main_queue.name}\nüî∫ –≠—Ç–æ –æ—á–µ—Ä–µ–¥—å, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏.üîª\n"
        )
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏
        if additional_bindings:
            for binding in additional_bindings:
                exchange_name = binding["exchange_name"]
                routing_key = binding.get("routing_key", "")
                extra_exchange = await channel.declare_exchange(
                    exchange_name, aio_pika.ExchangeType.FANOUT, durable=False
                )
                await main_queue.bind(extra_exchange, routing_key=routing_key)
                log.info(
                    f"üîó –û—á–µ—Ä–µ–¥—å {main_queue.name} –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –æ–±–º–µ–Ω–Ω–∏–∫—É {exchange_name} "
                    f"—Å –∫–ª—é—á–æ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ '{routing_key}'"
                )
                log.debug(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: {binding}")
        return main_queue


# –ö–ª–∞—Å—Å –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
class ServicePublisher(AsyncRabbitBase):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ RabbitMQ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞.
    """

    async def publish_message(self, message: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–º–µ–Ω–Ω–∏–∫.

        :param message: –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è.
        """
        connection = await self.get_connection()
        async with connection:
            channel = await connection.channel()
            await self.declare_infrastructure(channel)
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫
            exchange = await channel.declare_exchange(
                self.config.exchange_name, aio_pika.ExchangeType.FANOUT, durable=False
            )
            message_body = json.dumps(message)
            log.info(
                f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_body}\nüî∫ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {self.config.exchange_name} –æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.üîª\n"
            )

            await exchange.publish(
                aio_pika.Message(body=message_body.encode()),
                routing_key="",
            )

    async def rpc_request(
        self,
        message: Dict[str, Any],
        exchange_name: Optional[str] = None,
        routing_key: Optional[str] = None,
        correlation_id: Optional[str] = None,
        timeout: int = 30,
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ RPC-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RabbitMQ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
        """
        if correlation_id is None:
            correlation_id = str(uuid.uuid4())

        connection = await self.get_connection()
        async with connection:
            channel = await connection.channel()
            callback_queue = await channel.declare_queue(exclusive=True)

            # –°–æ–∑–¥–∞–µ–º future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            future = asyncio.get_event_loop().create_future()
            self.pending_responses[correlation_id] = future

            try:
                target_exchange = exchange_name or self.config.exchange_name
                target_routing_key = routing_key or self.config.routing_key

                log.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ RPC-–∑–∞–ø—Ä–æ—Å–∞ –≤ exchange={target_exchange}, routing_key={target_routing_key}\n"
                    f"Message: {message}\nCallback: {callback_queue.name}\n —Å correlation_id={correlation_id}"
                )

                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await channel.default_exchange.publish(
                    aio_pika.Message(
                        body=json.dumps(message).encode(),
                        reply_to=callback_queue.name,
                        correlation_id=correlation_id,
                        delivery_mode=aio_pika.DeliveryMode.PERSISTENT,
                    ),
                    routing_key=target_routing_key,
                )

                # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(future, timeout=timeout)
                    return response
                except asyncio.TimeoutError:
                    log.error(
                        f"‚è≥ RPC –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (timeout)! correlation_id={correlation_id}"
                    )
                    return {"status": "error", "message": "Request timeout"}
            finally:
                try:
                    # –£–±–∏—Ä–∞–µ–º future –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    await self.pending_responses.pop(correlation_id, None)
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                    await callback_queue.delete()
                except Exception as e:
                    log.error(f"Error in cleanup: {str(e)}")


# –ö–ª–∞—Å—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
class ServiceConsumer(AsyncRabbitBase):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞.
    """

    async def consume_messages(
        self,
        message_callback: Callable[[Dict[str, Any]], Any],
        additional_bindings: Optional[List[Dict[str, str]]] = None,
    ) -> None:
        """
        –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
        :param additional_bindings: –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        [{"exchange_name": "user_exchange", "routing_key": ""}, ...]
        :param message_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        async with await self.get_connection() as connection:
            channel = await connection.channel()
            # –û–±—ä—è–≤–ª—è–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É (–æ–±–º–µ–Ω–Ω–∏–∫–∏, –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–∏–≤—è–∑–∫–∏)
            queue = await self.declare_infrastructure(channel, additional_bindings)

            async with queue.iterator() as queue_iter:
                log.info(
                    "üëÄ –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π... ‚è≥ - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                )
                async for raw_message in queue_iter:
                    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è IDE –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    if isinstance(raw_message, AbstractIncomingMessage):
                        message: AbstractIncomingMessage = raw_message
                    else:
                        message: AbstractIncomingMessage = await raw_message

                    async with message.process():
                        try:
                            body: Dict[str, Any] = json.loads(
                                message.body.decode("utf-8")
                            )
                            log.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {body}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ correlation_id
                            if "correlation_id" in body:
                                await self.resolve_response(body)
                            else:
                                await message_callback(body)

                        except Exception as e:
                            log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            raise

    async def reply_to_rpc_request(
        self, original_message: Dict[str, Any], response: Dict[str, Any]
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ RPC-–∑–∞–ø—Ä–æ—Å.

        :param original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param response: –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            log.info(f"----- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response}")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ response –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            for key, value in response.items():
                if isinstance(value, bytes):
                    response[key] = value.decode("utf-8")
            async with await self.get_connection() as connection:
                async with connection:
                    channel = await connection.channel()
                    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ response —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
                    if isinstance(response, bytes):
                        response = json.loads(response.decode("utf-8"))
                    log.info(
                        f'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response}, correlation_id={original_message.get("correlation_id")}, reply_to={original_message.get("reply_to")}'
                    )
                    await channel.default_exchange.publish(
                        aio_pika.Message(
                            body=json.dumps(response).encode("utf-8"),
                            correlation_id=original_message.get(
                                "correlation_id"
                            ),  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π ID
                        ),
                        routing_key=original_message.get("reply_to", ""),
                    )
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    async def resolve_response(self, message: Union[IncomingMessage, Dict[str, Any]]):
        if isinstance(message, IncomingMessage):
            correlation_id = message.correlation_id
            body = json.loads(message.body.decode())
        elif isinstance(message, dict):
            correlation_id = message.get("correlation_id")
            body = message
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è!")

        log.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å correlation_id={correlation_id}")

        if correlation_id and correlation_id in self.pending_responses:
            future = self.pending_responses.pop(correlation_id)
            if not future.done():
                future.set_result(body)
        else:
            log.warning(
                f"‚ùó–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º correlation_id={correlation_id}"
            )
