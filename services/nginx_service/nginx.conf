worker_processes auto;


events {
    worker_connections 1024;
    multi_accept on;           # Разрешить одновременное принятие нескольких соединений
}

http {
    include mime.types;  # Добавляем это для обработки MIME-типов (например, для обработки CSS-файлов или JavaScript-файлов)
    # Добавляем зону для rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;


    sendfile on;
    keepalive_timeout 65;

    # Добавляем переменную для определения сервиса на основе реферера
    map $http_referer $static_service {
        "~*/auth/login"    auth_service;
        "~*/user/register" user_service;
        "~*/auth/docs"     auth_service;
        "~*/user/docs"     user_service;
        default           "";
    }

    server {
        listen 80;
        server_name localhost;

        error_page 401 @error401;

        location @error401 {
            return 301 /auth/login;
        }

        # Rate limiting для API запросов
        location /main/ {
            limit_req zone=one burst=5;
            proxy_pass http://krakend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors on;
        }

        # Rate limiting для auth сервиса
        location /auth/ {
            limit_req zone=one burst=5;
            proxy_pass http://auth_service:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors on;
        }

        # Rate limiting для user сервиса
        location /user/ {
            limit_req zone=one burst=5;
            proxy_pass http://user_service:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors on;
        }
        # Обработка документации Swagger
        location /openapi.json {
            if ($static_service = "") {
        return 404; # Или перенаправление на другой сервис
        }
            proxy_pass http://$static_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            autoindex on;
            # Добавляем заголовки для кэширования документации
            expires 1d;
            add_header Cache-Control "public, no-transform";
            }

        # Обработка статических файлов с учетом реферера
        location /static/ {
          if ($static_service = "") {
        return 404; # Или перенаправление на другой сервис
        }
            proxy_pass http://$static_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            autoindex on;
            # Добавляем заголовки для кэширования статики
            expires 1d;
            add_header Cache-Control "public, no-transform";
        }

        location / {
            return 404;
        }
    }
}