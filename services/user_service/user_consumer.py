import json
from typing import Dict, Any, Annotated

from rabbit.base_aio import ServiceConsumer
import logging
from api.user_v1 import users_crud
from core.models import db_helper
from core.models.user_model import User

log = logging.getLogger(__name__)


class UserConsumer(ServiceConsumer):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """

    async def handle_user_request(
        self,
        message: Dict[str, Any],
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ RabbitMQ.
        """
        try:
            log.warning(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}\n–¢–∏–ø:")
            if isinstance(message, bytes):
                message = json.loads(message.decode("utf-8"))
            action = message.get("action")
            username = message.get("username")
            correlation_id = message.get("correlation_id")
            log.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: action={action}, username={username} üòä")
            if action == "get_user_data" and username:
                async with db_helper.session() as session:
                    user: User = await users_crud.crud_user.get_user_by_field(
                        db=session, field="username", value=username
                    )
                    response = (
                        {
                            "id": user.id,
                            "username": user.username,
                            "email": user.email,
                            "hashed_password": user.hashed_password,
                            "is_active": user.is_active,
                            "correlation_id": correlation_id,
                        }
                        if user
                        else {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    )
            else:
                response = {"error": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
            await self.reply_to_rpc_request(message, response)
            log.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ —É—Å–ø–µ—à–Ω–æ! üöÄ")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    async def process_auth_events(self, message: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ `auth`.
        """
        event = message.get("event")
        data = message.get("data")

        if event == "token_issued":
            user_id = data.get("user_id")
            username = data.get("username")
            log.info(
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})."
            )
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
        elif event == "token_validated":
            username = data.get("username")
            log.info(
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}."
            )
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
        else:
            log.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}.")
