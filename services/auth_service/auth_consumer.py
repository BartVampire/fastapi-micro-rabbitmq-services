import json
import logging
from enum import Enum
from typing import Dict, Any

import aio_pika
from aio_pika import IncomingMessage
from pydantic import ValidationError

from core.schemas.auth_user_schemas import AuthUserSchema
from rabbit.base_aio import ServiceConsumer
from core.models import db_helper
from api.user_v1.users_crud import crud_user

log = logging.getLogger(__name__)


class UserEvent(str, Enum):
    CREATED = "user.created"
    UPDATED = "user.updated"
    DELETED = "user.deleted"


class AuthConsumer(ServiceConsumer):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """

    async def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º)
        """
        await self.consume_messages(
            self.process_user_event,
            additional_bindings=[
                {"exchange_name": "user_exchange", "routing_key": "auth_routing_key"}
            ],
        )

    async def process_user_event(self, message_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            event_type = message_data.get("event_type")
            user_data = message_data.get("user_data")

            if not event_type or not user_data:
                raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")

            log.info(
                f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_data}, —Ç–∏–ø: {type(message_data)}"
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes –¥–ª—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
            if "hashed_password" in user_data:
                user_data["hashed_password"] = user_data["hashed_password"].encode()

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ö–µ–º—ã
            try:
                user = AuthUserSchema(**user_data)
            except ValidationError as ve:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(ve)}")
                return

            result = await self.handle_user_event(event_type, user)

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            log.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {event_type} —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}"
            )

            return result

        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            raise

    async def handle_user_event(
        self, event_type: str, user: AuthUserSchema
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        async with db_helper.session_factory() as db:
            try:
                if event_type == UserEvent.CREATED:
                    result = await crud_user.create_user(db=db, user=user)
                elif event_type == UserEvent.UPDATED:
                    db_user = await crud_user.get_user_by_field(
                        db=db, field="username", value=user.username
                    )
                    if not db_user:
                        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user.username}")
                    result = await crud_user.update_user(
                        db=db, db_user=db_user, user_update=user
                    )
                elif event_type == UserEvent.DELETED:
                    db_user = await crud_user.get_user_by_field(
                        db=db, field="username", value=user.username
                    )
                    if not db_user:
                        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user.username}")
                    result = await crud_user.delete_user(db=db, user_uuid=db_user.uuid)
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}")

                return result
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {str(e)}")
                raise
